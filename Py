Squareroot via Bi-section Method


def square_root_by_BI(x, epsilon):
    """Assume x >= 0 and epsilon > 0
       Return y such that y*y is within the epsilon of x"""
    assert x >= 0, 'X must be a non-negative number, not ' + str(x)
    assert epsilon > 0, 'epsilon must be positive, not ' + str(epsilon)
    low = 0
    high = x
    guess = (low + high) / 2.0
    iteration = 1
    while abs(guess ** 2 - x) > epsilon and iteration <= 100:
        if guess ** 2 < x:
            low = guess
        else:
            high = guess
        guess = (low + high) / 2.0
        iteration += 1
    assert iteration <= 100, 'Iteration count exceeded'
    print 'Bi-section method.g Number of iterations : ', iteration, 'estimate: ', guess
    return guess


square_root_by_BI(16, 0.1)
Bi-section method. Number of iterations :  2 estimate:  4.0

square_root_by_BI(10000, 0.1)
Bi-section method. Number of iterations :  22 estimate:  99.9999046326



Squareroot via Newton-Raphson Method


def square_root_by_NewtonRaphson(x, epsilon):
    """Assume x >= 0 and epsilon > 0
       Return y such that y*y is within the epsilon of x"""
    assert x >= 0, 'x must be a non-negative number, not: ' + str(x)
    assert epsilon > 0, 'epsilon must be positive, not: ' + str(epsilon)
    low = 0
    high = float(x)
    iteration = 1
    guess = x / 2.0
    # guess = 0.001
    diff = guess ** 2 - x
    while abs(diff) > epsilon and iteration <= 100:
        guess = guess - diff / (2.0 * guess)
        diff = guess ** 2 - x
        iteration += 1
    assert iteration <= 100, 'Iteration count exceeded'
    print 'NR-method. Number of iterations:', iteration, 'Estimate: ', guess
    return guess


square_root_by_NewtonRaphson(16, 0.1)
NR-method. Number of iterations: 4 Estimate:  4.0012195122

square_root_by_NewtonRaphson(10000, 0.1)
NR-method. Number of iterations: 10 Estimate:  100.000000254
